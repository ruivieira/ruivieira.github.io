<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog on Rui Vieira</title><link>/blog/</link><description>Recent content in Blog on Rui Vieira</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><atom:link href="/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Exception Bubbling in Python</title><link>/blog/2023-09-02.html</link><pubDate>Sat, 02 Sep 2023 00:00:00 +0000</pubDate><guid>/blog/2023-09-02.html</guid><description>Exception Bubbling in PythonOne aspect of Java that occasionally nudges at me is its explicit approach to exception handling. Java requires developers to either handle exceptions via try-catch blocks or declare them in method signatures. While it does enforce robustness, it sometimes feels a bit too constrained, especially when compared to the flexible nature of Python.
Recently, I crafted a solution in Python for k8sutils. Instead of the usual explicit exception handling or modifying method signatures, I created a Python decorator - akin to annotations in Java - that substitutes an exception for another without altering the underlying code.</description></item></channel></rss>